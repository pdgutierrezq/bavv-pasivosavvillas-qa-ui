{"version":3,"sources":["components/PieChart/PieChartComponent.js","components/PieChart/index.js","components/SpecsList/index.js","components/SpecsList/SpecsList.js","components/AutoScroll/index.js","components/TestList/index.js","components/TestList/TestList.js","components/TestsContainer/index.js","components/TestsContainer/TestsContainer.js","components/Dashboard/Dashboard.js","components/Dashboard/index.js","components/Reports/index.js","components/Reports/Reports.js","components/DetailedView/DetailedView.js","components/DetailedView/index.js","CypressAnalytics.js","serviceWorker.js","index.js"],"names":["Math","PI","PieChartComponent","props","data","id","random","Date","now","useState","height","width","size","setSize","useEffect","dimensions","document","getElementById","getBoundingClientRect","radius","min","className","passValue","find","e","name","value","percentage","toFixed","getPassValue","getFailValue","dataKey","nameKey","cx","cy","outerRadius","fill","labelLine","verticalAlign","SpecsList","specs","stats","querySelector","clientHeight","maxAmount","selector","setTimeout","startScroll","totalScrollDistance","map","spec","index","key","fail","join","pass","total","AutoScroll","TestList","specName","onEnd","getTestListForSpec","tests","length","test","title","fullTitle","passed","message","suites","Object","keys","filter","includes","forEach","suite","testsForSuite","flat","TestsContainer","numOfElements","firstIndex","setFirstIndex","secondIndex","setSecondIndex","showNextSpec","setIndex","firstSpecName","secondSpecName","bind","Dashboard","config","pieData","timestamp","date","getFullYear","getMonth","getDate","getHours","getMinutes","getDateInFormat","lastRun","totalTests","Reports","path","staticPath","displayData","getDisplaySuite","slice","showErrorMessageForIndex","setShowErrorMessageForIndex","getDisplayTest","errorClass","showErrorMessage","onClick","handleToggleErrorMessage","p","arr","reportPath","pathURL","JSON","stringify","href","replace","getPathLinks","newPath","asString","prependPath","window","location","open","getSuites","DetailedView","ReportsComponent","match","params","parse","exact","render","CypressAnalytics","type","setData","setConfig","results","fetch","then","res","json","c","time","refreshDelay","reload","reportType","toUpperCase","trim","Boolean","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0a501b9d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Cell, Legend, Pie, PieChart} from \"recharts\";\r\nimport './PieChart.css'\r\n\r\nconst RADIAN = Math.PI / 180;\r\n\r\nfunction PieChartComponent(props) {\r\n    const {data} = props;\r\n    const id = `PieChart_${Math.random() * Date.now()}`\r\n\r\n    const [size, setSize] = useState({height: 0, width: 0})\r\n\r\n    const renderCustomizedLabel = function ({cx, cy, midAngle, innerRadius, outerRadius, value, percent}) {\r\n        const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n        const x = cx + radius * Math.cos(-midAngle * RADIAN) / 3;\r\n        const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n        return (\r\n            <text x={x} y={y} fill=\"black\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\"\r\n                  fontSize={25}>\r\n                {`${(percent * 100).toFixed(0)}% (${value})`}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    useEffect(() => {\r\n        const dimensions = document.getElementById(id).getBoundingClientRect()\r\n        setSize({\r\n            width: dimensions.width,\r\n            height: dimensions.height\r\n        })\r\n    }, [])\r\n\r\n    const radius = Math.min(size.height, size.width) / 2 - 40;\r\n\r\n    const getPassValue = () => {\r\n        const passValue = data.find(e => e.name === 'Pass').value;\r\n        const percentage = (passValue / (data[0].value + data[1].value) * 100).toFixed(2) ;\r\n        return `${percentage}%  (${passValue})`\r\n    }\r\n    const getFailValue = () => {\r\n        const passValue = data.find(e => e.name === 'Fail').value;\r\n        const percentage = (passValue / (data[0].value + data[1].value) * 100).toFixed(2) ;\r\n        return `${percentage}% (${passValue})`\r\n    }\r\n\r\n    return (\r\n        <div className='PieChartComponent'>\r\n            <div className='PieChartComponentStats'>\r\n                <div>{getPassValue()}</div>\r\n                <div>{getFailValue()}</div>\r\n            </div>\r\n            <div className='PieChartContainer' id={id}>\r\n                <PieChart width={size.width} height={size.height}>\r\n                    <Pie data={data} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={radius} fill=\"#8884d8\"\r\n                         labelLine={false} >\r\n                        <Cell fill='#81C784'/>\r\n                        <Cell fill='#FF8A65'/>\r\n                    </Pie>\r\n                    <Legend verticalAlign=\"bottom\" height={36}/>\r\n                </PieChart>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PieChartComponent;","import PieChartComponent  from \"./PieChartComponent\";\r\n\r\nexport default PieChartComponent;","import SpecsList from './SpecsList';\n\nexport default SpecsList;","import React, {useEffect} from 'react';\nimport './SpecsList.css';\n\nconst startScroll = (maxAmount, selector) => {\n    const element = document.querySelector(selector);\n    let currentScrollOffset = 0;\n    const scroll = (currentAmount) => {\n        setTimeout(() => {\n            // element.scroll(0, currentAmount);\n            // const nextAmount = currentAmount + 10;\n            // if(nextAmount > maxAmount) scroll(0)\n            // else scroll(nextAmount)\n        }, 100)\n    }\n\n    scroll(currentScrollOffset);\n}\n\nconst SpecsList = (props) => {\n    const {specs, stats} = props;\n\n    const getTestListForSpec = (spec, tests = []) => {\n        if (spec.tests && spec.tests.length > 0) tests = [...tests, spec.tests.map(test => ({\n            title: test.fullTitle,\n            passed: test.passed\n        }))]\n\n        const suites = Object.keys(spec).filter(key => ![\"tests\", \"pass\", \"fail\", \"total\", \"title\", \"fullTitle\"].includes(key));\n        if (suites.length > 0) {\n            suites.forEach(suite => {\n                const testsForSuite = getTestListForSpec(spec[suite]);\n                tests = [...tests, ...testsForSuite];\n            })\n        }\n\n        return tests.flat();\n    }\n\n    useEffect(() => {\n\n        const containerHeight = document.querySelector(\".suites\").clientHeight;\n        const listHeight = document.querySelector(\".SpecsList\").clientHeight\n        const totalScrollDistance = containerHeight - listHeight;\n        startScroll(totalScrollDistance, \".SpecsList\")\n        // if(listHeight > )\n    }, [])\n\n    return (\n        <ul className='SpecsList'>\n            {specs.map((spec, index) =>\n                    (<li key={`suite-${index}`}\n                         className={['SpecsList__Spec', stats[spec].fail > 0 ? 'error' : ''].join(\" \")}>\n                        <div className={'SpecsList__Spec__Header'}>\n                            <div>{spec}</div>\n                            <div>Passed: {stats[spec].pass}/{stats[spec].total}</div>\n                        </div>\n                        {/*<ul className='SpecsList__Spec__TestList'>*/}\n                        {/*    {getTestListForSpec(stats[spec]).map(*/}\n                        {/*        test => (*/}\n                        {/*            <li key={`suite-${index}-${test.title}`} className={['SpecsList__Spec__TestList__Test', test.passed ? '' : 'error'].join(\" \")}>*/}\n                        {/*            <span className={[\"material-icons\", test.passed ? '' : 'error'].join(' ')}>*/}\n                        {/*                {test.passed ? 'check' : 'close'}*/}\n                        {/*                </span>{test.title}*/}\n                        {/*            </li>)*/}\n                        {/*    )}*/}\n                        {/*</ul>*/}\n                    </li>)\n            )}\n        </ul>\n    )\n}\n\nexport default SpecsList;","import AutoScroll from 'react-autoscroll-component';\n\nexport default AutoScroll","import TestList from './TestList';\nexport default TestList;","import React from 'react';\nimport './TestList.css';\nimport AutoScroll from \"../AutoScroll\";\n\nconst TestList = (props) => {\n    const {spec, specName} = props;\n    const getTestListForSpec = (spec, tests = []) => {\n        if (spec.tests && spec.tests.length > 0) tests = [...tests, spec.tests.map(test => ({\n            title: test.fullTitle,\n            passed: test.passed,\n            message: test.message\n        }))]\n\n        const suites = Object.keys(spec).filter(key => ![\"tests\", \"pass\", \"fail\", \"total\", \"title\", \"fullTitle\"].includes(key));\n        if (suites.length > 0) {\n            suites.forEach(suite => {\n                const testsForSuite = getTestListForSpec(spec[suite]);\n                tests = [...tests, ...testsForSuite];\n            })\n        }\n\n        return tests.flat();\n    }\n\n    const onEnd = () => {\n        if(props.onEnd) props.onEnd();\n    }\n\n    return (\n        <div className='TestList'>\n            <div\n                className={['TestList__Spec', spec.fail > 0 ? 'error' : ''].join(\" \")}>\n                <div className={'TestList__Spec__Header'}>\n                    <div>{specName}</div>\n                    <div>Passed: {spec.pass}/{spec.total}</div>\n                </div>\n                <AutoScroll onEnd={onEnd} data={spec}>\n                    <ul className='TestList__Spec__TestList'>\n                        {getTestListForSpec(spec).map(\n                            (test, index) => (\n                                <li key={`suite-${index}-${test.title}`}\n                                    className={['TestList__Spec__TestList__Test', test.passed ? '' : 'error'].join(\" \")}>\n                                <span className={[\"material-icons\", test.passed ? '' : 'error'].join(' ')}>\n                                    {test.passed ? 'check' : 'close'}\n                                    </span>\n                                    {test.title} {test.message ? `- ${test.message}` : ''}\n                                </li>)\n                        )}\n                    </ul>\n                </AutoScroll>\n            </div>\n        </div>\n    )\n}\n\nexport default TestList;","import TestsContainer from './TestsContainer';\nexport default TestsContainer;","import React, {useState} from 'react';\nimport './TestsContainer.css';\nimport TestList from \"../TestList\";\n\nconst TestsContainer = (props) => {\n    const {specs, stats} = props;\n    const numOfElements = specs.length;\n    const [firstIndex, setFirstIndex] = useState(0);\n    const [secondIndex, setSecondIndex] = useState(1);\n\n    const showNextSpec = (setIndex) => {\n        if(setIndex === \"FIRST\") setFirstIndex((firstIndex + 2) % numOfElements);\n        else setSecondIndex((secondIndex + 2) % numOfElements);\n    }\n\n    const firstSpecName = specs[firstIndex];\n    const secondSpecName = specs[secondIndex];\n\n    return (\n        <div className=\"TestsContainer\">\n            {numOfElements > 0 && <TestList onEnd={showNextSpec.bind(null, \"FIRST\")} spec={stats[firstSpecName]} specName={firstSpecName}/>}\n            {numOfElements > 1 && <TestList onEnd={showNextSpec.bind(null, \"SECOND\")} spec={stats[secondSpecName]} specName={secondSpecName}/>}\n        </div>\n    )\n\n}\n\nexport default TestsContainer;","import React from 'react';\r\nimport PieChart from '../PieChart'\r\nimport SpecsList from '../SpecsList'\r\nimport './Dashboard.css';\r\nimport TestsContainer from \"../TestsContainer\";\r\nimport AutoScroll from \"../AutoScroll\";\r\n\r\nfunction Dashboard(props) {\r\n    const {data, config} = props;\r\n    const stats = data;\r\n\r\n    const pieData = [\r\n        {name: \"Pass\", value: stats.pass || 0},\r\n        {name: \"Fail\", value: stats.fail || 0}\r\n    ]\r\n\r\n    const specs = Object.keys(stats).filter(e => ![\"tests\", \"pass\", \"fail\"].includes(e));\r\n\r\n    const getDateInFormat = timestamp => {\r\n        const date = new Date();\r\n        return `${date.getFullYear()}/${date.getMonth()+1}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}`\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='DashboardWidgetContainer'>\r\n                <div className='DashboardWidgetContainerRow DashboardTitleContainer'>\r\n                    <div className='DashboardTitle'>\r\n                        {config.title} - last run: {getDateInFormat(config.lastRun)}\r\n                    </div>\r\n                </div>\r\n                <div className='DashboardWidgetContainerRow'>\r\n                    <div className='overallResults'>\r\n                        <PieChart totalTests={stats.tests} data={pieData}/>\r\n                    </div>\r\n                    <div className='suites'>\r\n                        <AutoScroll data={stats}>\r\n                            <SpecsList stats={stats} specs={specs}/>\r\n                        </AutoScroll>\r\n                    </div>\r\n                </div>\r\n                <div className='DashboardWidgetContainerRow'>\r\n                    <TestsContainer stats={stats} specs={specs}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import Dashboard  from \"./Dashboard\";\r\n\r\nexport default Dashboard;","import Reports from './Reports';\r\n\r\nexport default Reports;","import React, {useState} from 'react';\nimport './Reports.scss';\n\nconst className = 'c-Reports';\n\nconst getDisplaySuite = (data, path) => {\n    return path.length > 0 ? getDisplaySuite(data[path[0]], path.slice(1)) : data;\n}\n\nconst Reports = props => {\n    const {data, config, path, staticPath} = props;\n    const displayData = getDisplaySuite(data, path);\n    const getDisplaySuiteName = name => name.replace(/\\\\/gi, '/')\n    const [showErrorMessageForIndex, setShowErrorMessageForIndex] = useState(null);\n\n    const open = (suite) => {\n        const newPath = [...path, suite.title]\n        const asString = JSON.stringify(newPath);\n        const prependPath = props.staticPath ? `#${staticPath}` : '/#/reports'\n        window.location = `${prependPath}/${asString}`;\n    }\n\n    const getSuites = (displayData) => {\n        const keys = Object.keys(displayData).filter(key => !['pass', 'fail', 'total', 'fullTitle', 'tests', 'title'].includes(key))\n        return keys.map((key, index) => {\n            const suite = displayData[key];\n            return (\n                <li onClick={() => open(suite)} key={`suite-${index}`}\n                    className={!!suite.fail && suite.fail > 0 ? `report-suite-error` : \"\"}>\n                    <div>{getDisplaySuiteName(suite.title)}</div>\n                    <div className='counter-stats'>{suite.pass}/{suite.pass + suite.fail}</div>\n                </li>\n            )\n        })\n    }\n\n    const handleToggleErrorMessage = (test, index) => {\n        if(test.passed) return;\n        setShowErrorMessageForIndex(index === showErrorMessageForIndex ? null : index);\n    }\n\n    const getDisplayTest = (test, index) => {\n        const errorClass = test.passed ? \"\" : \"report-suite-error\"\n        const errorMessageClass = !test.passed && showErrorMessageForIndex === index ? \"report-suite-has-message\" : \"\";\n        const className = [errorClass, errorMessageClass].join(\" \");\n        const showErrorMessage = showErrorMessageForIndex === index;\n        return (\n            <>\n                <li key={`test-${index}`} className={className} onClick={() => handleToggleErrorMessage(test, index)}>\n                    <div>{test.title}</div>\n                </li>\n                {showErrorMessage && (<li key={`test-${index}`} className={errorClass}>\n                    <div>{test.message}</div>\n                </li>)}\n            </>\n        )\n    }\n\n\n    const getTests = tests => {\n        if (!tests || tests.length === 0) return null;\n        return (\n            <>\n                <ul>\n                    {tests.map(getDisplayTest)}\n                </ul>\n            </>)\n    }\n\n    const getPathLinks = path => {\n        path = [\"\", ...path]\n        return path.map((p, index, arr) => {\n            const reportPath = arr.slice(0, index + 1);\n            const pathURL = p === \"\" ? '' : JSON.stringify(reportPath.filter(e => e !== \"\"));\n            if (index < arr.length - 1)\n                return (<span key={`link-${index}`}><a href={`#${staticPath}/${pathURL}`}>{p === \"\" ? '/' : p.replace(\"\\\\\", '/')}</a><span> > </span></span>)\n            else\n                return <span key={`link-${index}`}><a href={`#${staticPath}/${pathURL}`}>{p === \"\" ? '/' : p.replace(\"\\\\\", '/')}</a></span>\n        })\n    }\n\n    return (\n        <div className={className}>\n            <div className={`${className}--pathLinks`}>{getPathLinks(path)}</div>\n            <ul>\n                {getSuites(displayData)}\n            </ul>\n            {getTests(displayData.tests)}\n        </div>\n    )\n}\n\nexport default Reports;","import React from 'react';\r\nimport Reports from \"../Reports\";\r\nimport './DetailedView.css';\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nfunction DetailedView({data, config,}) {\r\n\r\n    const ReportsComponent = ({match}) => {\r\n        const path = match.params.path;\r\n        return (<div className=\"AnalyticsDashboard\">\r\n            {(data && config) ?\r\n                <Reports staticPath='/reports' data={data}\r\n                         config={config}\r\n                         path={path ? JSON.parse(path) : []}/> : <></>}\r\n        </div>)\r\n    }\r\n\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" render={ReportsComponent} />\r\n                <Route exact path=\"/reports\" render={ReportsComponent} />\r\n                <Route path=\"/reports/:path+\" render={ReportsComponent} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default DetailedView;\r\n","import DetailedView from './DetailedView';\r\n\r\nexport default DetailedView;\r\n","import React, {useState, useEffect} from 'react';\nimport Dashboard from \"./components/Dashboard\";\nimport './CypressAnalytics.css';\nimport DetailedView from \"./components/DetailedView\";\n\nconst reload = time => {\n    setTimeout(() => {\n        window.location.reload()\n    }, time);\n}\n\nfunction CypressAnalytics() {\n    const [data, setData] = useState(null);\n    const [config, setConfig] = useState(null);\n\n    useEffect(() => {\n        if (window.results) setData(window.results)\n        else\n            fetch('results.json').then(res => {\n                res.json().then(setData)\n            })\n\n        if (window.config) setConfig(window.config)\n        else\n            fetch('config.json').then(res => {\n                res.json().then(c => {\n                    if (c.refreshDelay) reload(c.refreshDelay)\n                    setConfig(c)\n                })\n            })\n    }, [])\n\n    const getAnalyticsComponent = type =>\n        type && type.toUpperCase().trim() ===\"DETAILS\" ? <DetailedView config={config} data={data}/> : <Dashboard config={config} data={data}/>\n\n    return (\n        <div className=\"CypressAnalytics\">\n            {(data && config) ? getAnalyticsComponent(window.reportType || \"dashboard\") : <></>}\n        </div>\n    );\n}\n\nexport default CypressAnalytics;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. CypressAnalytics is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CypressAnalytics from './CypressAnalytics';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CypressAnalytics />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}